f.安裝x11vnc服務器，並設定好開機自動執行，並使用ssh tunnel加密連線

參考資料來源：
http://terry.im/wiki/terry/Install%2Band%2BConfig%2BVNC%2BServer.html#InstallandConfigVNCServer-Ubuntu/Debian

登入Cubian之後，切換到root用戶身份
$ sudo -i

在終端機執行以下指令安裝x11vnc套件
# apt-get install x11vnc

安裝完成之後，再切換回預設用戶cubie的身分
# exit

切換到家目錄
$ cd ~

看一下現在的位置
$ pwd

終端機打印了
/home/cubie

看一下有沒有什麼叫作vnc的目錄
$ ls -al|grep vnc

終端機輸出的是空白，沒有，/home/cubie目錄裡沒有任何名字裡有vnc三個字的子目錄
現在來設定vnc密碼，執行
$ x11vnc -storepasswd

終端機打印了
Enter VNC password: 
Verify password:    
Write password to /home/cubie/.vnc/passwd?  [y]/n y
Password written to: /home/cubie/.vnc/passwd

我在剛才設定好了用戶cubie的vnc密碼
可以看一下
$ ls -al|grep vnc

終端機打印了
drwxr-xr-x  2 cubie cubie   4096 11月 14 02:46 .vnc

切換進這個.vnc子目錄，然後看看有什麼檔案？
$ cd .vnc
$ ls -al

終端機打印了
總計 12
drwxr-xr-x  2 cubie cubie 4096 11月 14 02:46 .
drwxr-xr-x 16 cubie cubie 4096 11月 14 02:46 ..
-rw-------  1 cubie cubie    8 11月 14 02:46 passwd

剛才設定的vnc密碼就存在這裡
現在要啟動vnc server，一樣還是用戶cubie的身分，請執行
$ x11vnc -safer -forever -display :0 -rfbauth /home/cubie/.vnc/passwd -rfbport 59000 -bg

如果要開log功能，就執行
$ x11vnc -safer -forever -display :0 -rfbauth /home/cubie/.vnc/passwd -rfbport 59000 -bg > /tmp/x11vnc.log 2>&1 &

這個時候隨便找一個有安裝vnc viewer的客戶端機器（例如我的筆記型電腦）就可以對Cubian使用vnc連線了
使用IP_Address:port這樣的地址來連線（例如：192.168.0.162:59000）
如果要讓Cubian在開機的時候於背景自動執行x11vnc，在x11vnc啟動之前，首先要讓X Server先啟動
這裡為了方便，直接讓Cubian在開機之後，以預設用戶cubie登入X window，不再詢問用戶名稱和密碼
請登入為root用戶，打開vi文字編輯器，修改/etc/slim.conf
# vi /etc/slim.conf
我只改了這兩行
auto_login          yes
default_user        cubie
修改完就存檔離開vi文字編輯器

剛才修改/etc/slim.conf的時候
可以看到這個檔案裡有一段設定是這樣
# This command is executed after a succesful login.
# it runs in root
login_success_cmd     exec /bin/bash /usr/lib/cubian/cubian-xinitrc-success %screen_width %screen_height 

所以我可以大概知道，如果用戶登入圖形介面之後
/usr/lib/cubian/cubian-xinitrc-success
這個檔案會被執行一次

所以再修改/usr/lib/cubian/cubian-xinitrc-success
在最後面加上這兩行
# x11vnc service autostart
x11vnc -safer -forever -display :0 -rfbauth /root/vncpasswd -rfbport 59000 -bg > /tmp/x11vnc.log 2>&1 &

複製剛才產生的vnc密碼檔，到root的家目錄下
# cp /home/cubie/.vnc/passwd /root/vncpasswd
# chown root:root /root/vncpasswd
# chmod 600 /root/vncpasswd

接下來把cubietruck重新開機，這一次一開機，就會以用戶cubie的身分自動登入圖形介面了
這是因為我們剛才在/etc/slim.conf修改的設定生效了
然後登入圖形介面之後，又會再自動執行一次
/usr/lib/cubian/cubian-xinitrc-success
這個檔案裡的最後兩行是我們剛才加上去的
接著x11vnc也在自動登入圖形介面之後，自動於埠號59000啟動了

＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊
額外的安全設定：使用ssh tunnel加密vnc連線

網路參數：
稍早前我又改變心意，把網路線接到CubieTruck的RJ45接口上了
所以網路參數現在是
Cubian機：192.168.0.160
筆記型電腦：192.168.0.12

參考資料：
http://www.karlrunge.com/x11vnc/#tunnelling
（作者寫得超長，不過我只有參考SSH method: If both users開頭下面那二十幾行…）
這一篇文章寫了幾個方法都可以建立加密通道
不過這個我一試就成，我也懶得去試其他的了，反正效果都一樣，有給我乖乖加密就好

動手之前先微調上面我們剛完成的/usr/lib/cubian/cubian-xinitrc-success
# vi /usr/lib/cubian/cubian-xinitrc-success

把裡面啟動x11vnc的那行指令改成這樣
x11vnc -safer -forever -display :0 -rfbauth /root/vncpasswd -localhost -rfbport 5900 -bg > /tmp/x11vnc.log 2>&1 &

這麼作是為了要讓x11vnc綁定在127.0.0.1:5900
改好之後請重新啟動Cubian機器之後，再作下面的動作，執行
# init 6

要建立ssh tunnel，必須要VNC Server（Cubian機）和VNC Viewer（筆記型電腦）同時議定一個port number
在這裡我假設是5933

在VNC Server這邊，也就是Cubian機器上，請以用戶cubie登入，然後執行
$ ssh -p36000 -t -R 5933:localhost:5900 cubie@localhost

在VNC Viewer這邊，也就是筆記型電腦上，請以用戶anntony身分登入，然後執行
$ cd /home/anntony/.ssh/cubian
$ ssh -p36000 -i ./cubie@cubian.private.key -t -L 5900:localhost:5933 cubie@192.168.0.160

這樣就可以了，然後我們在筆記型電腦上面打開遠端桌面檢視器 vinagre
對著這個地址作連線
127.0.0.1:5900

按下連線之後，大功告成
值得注意的是，在VNC Server端還有VNC Client端我們都各自執行了一個ssh指令
如果其中一邊退出了ssh登入，那麼你在筆記型電腦上，就再不能使用127.0.0.1:5900來連到Cubian機器上運行的VNC Server了

＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊
還是ssh tunnel

也可以不使用Vnc Server上的tcp port 5933再轉5900的方式
讓Vnc Viewer直接對著Vnc Server的127.0.0.1:5900連線
在Vnc Server上不用再執行這一行指令
$ ssh -p36000 -t -R 5933:localhost:5900 cubie@localhost
這一行指令的效果是
在CubieTruck（Vnc Server）上，對著localhost:5933連線的封包，轉發到localhost:5900
不用這樣子也可以
Vnc Server這邊什麼事也不要作
然後在Vnc Viewer (筆記型電腦)
執行這樣的ssh客戶端指令
$ cd /home/anntony/.ssh/cubian
$ ssh -p36000 -i ./cubie@cubian.private.key -t -L 5900:127.0.0.1:5900 cubie@192.168.0.160

第二行指令的-L後面跟著的5900
意思是在Vnc Viewer這邊（筆記型電腦）本機的tcp port 5900上面
對應著SSH Server那邊的127.0.0.1:5900也就是Vnc Server的端口
ssh客戶端連線成功之後，你可以打開筆記型電腦的終端機
執行
anntony@anntony-Lenovo-B590 ~ $ sudo -i
[sudo] password for anntony: 
anntony-Lenovo-B590 ~ # netstat -anp|grep 5900
tcp        0      0 127.0.0.1:5900          0.0.0.0:*               LISTEN      3354/ssh        
tcp6       0      0 ::1:5900                :::*                    LISTEN      3354/ssh        
anntony-Lenovo-B590 ~ # 

然後你會看到筆記型電腦的127.0.0.1:5900居然有在LISTEN
感覺上就像把遠端的CubieTruck機器上運行的Vnc Server綁架來本地機了一樣
接著就很單純
你打開Vnc Viewer朝著127.0.0.1:5900這個地址連線就大功告成了

＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊
只要建立ssh tunnel，不需要login shell的指令
$ ssh -p36000 -i ./cubie@cubian.private.key -L 5900:127.0.0.1:5900 cubie@192.168.0.160 -N

注意最後面加上的-N參數
和上面建立ssh tunnel的指令不同的是
上面的除了把cubian機器的127.0.0.1:5900綁到本地機(筆記型電腦) 的5900端口
還會多開一個cubian機器的login shell
如果覺得那個login shell很多餘
(此時並沒有要操作Cubian機器，只是要建立ssh tunnel而已)
可以加上-N參數

參考資料
http://www.linuxhorizon.ro/ssh-tunnel.html

＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊
使用PuTTY軟件對cubian機器建立ssh tunnel

參考資料
http://blog.xuite.net/vexed/tech/14718287-%E7%94%A8+PuTTY+%E7%9A%84+SSH+Tunnel+%E4%B8%8A+BBS

我們現在要進行的動作
就是在筆記型電腦Linux的終端機下執行的這一行指令
$ ssh -p36000 -i ./cubie@cubian.private.key -L 5900:127.0.0.1:5900 cubie@192.168.0.160 -N

我們要達成同樣的效果，只是這一次不下指令
而是用PuTTY軟件來完成
首先要把
/home/anntony/.ssh/cubian/cubie@cubian.private.key
轉換成PuTTY軟件的格式
在安裝PuTTY套件的時候，一併安裝了puttygen
可以確認一下，指令是
$ which puttygen
有安裝的話
終端機會回答
/usr/bin/puttygen
接著我再執行了
$ man puttygen
看一下這個工具的用法
整篇廢言很多
我看到這一句比較有用
puttygen my-ssh.com-key -o mykey.ppk
所以我依樣畫葫蘆
我擔心這個指令會修改原來的私鑰，所以備份一支，用備份的來搞比較安全
$ cp /home/anntony/.ssh/cubian/cubie@cubian.private.key /tmp
$ cd /tmp
$ puttygen /tmp/cubie@cubian.private.key -o /tmp/cubie@192.168.0.160.ppk
$ cp /tmp/cubie@192.168.0.160.ppk /home/anntony/.ssh/cubian/
這樣就產生了一支PuTTY軟件可以識別的ssh私鑰在
/home/anntony/.ssh/cubian/cubie@192.168.0.160.ppk

打開PuTTY軟件
左邊選單預設在Session的位置，右邊的
Host Name(or IP address)填入192.168.0.160
Port填入36000
左邊選單切換到Connection > Data
在右邊的
Auto-login username填入cubie
左邊選單切換到SSH > Auth
在右邊的
Private Key file for authentication旁邊按下Browse按鈕
選擇我們的連線私鑰/home/anntony/.ssh/cubian/cubie@192.168.0.160.ppk
左邊選單切換到SSH > Tunnels
在右邊的
Add new forwarded port:
Source port輸入5900
Destination輸入127.0.0.1:5900
下方維持Local和Auto被圈選的狀態不要動它
按下右方的「Add」鈕
如果需要筆記型電腦的3306端口，與Cubian機器的127.0.0.1:3306對接
可以再重複上面的動作
Source port輸入3306
Destination輸入127.0.0.1:3306
再按下一次右下的「Add」鈕

設定完成後，按下最下方的「Open」鈕
此時會打開一個已經連線到Cubian機器的Login shell
接著在筆記型電腦的終端機上，執行
$ netstat -anp|grep 5900
然後可以看到
(Not all processes could be identified, non-owned process info
 will not be shown, you would have to be root to see it all.)
tcp        0      0 127.0.0.1:5900          0.0.0.0:*               LISTEN      4011/putty      
tcp6       0      0 ::1:5900                :::*                    LISTEN      4011/putty      
就表示ssh tunnel建立成功
Cubian機器上的本機地址127.0.0.1的5900端口，已經被綁定到筆記型電腦本機的5900端口
也就是說，在筆記型電腦上，可以使用Vinagre Vnc viewer連自已的127.0.0.1:5900，來遠端操作Cubian機器了
最後不要忘了
把剛才在PuTTY裡的設定值，在左邊選單選
Session
回到最初的畫面
在右邊的
Save Sessions的下面
隨便輸入一個名字當作這次設定值的名字
例
ssh_tunnel_to_192.168.0.160
並按下右邊的Save鈕
下次可以直接把這組設定值直接叫出來直接按「Open」連線就行了
還沒搞清楚PuTTY有沒有那種只建立ssh tunnel然後不要給出Login shell的方式
不過這是小問題，即使建立ssh tunnel之後，PuTTY軟件給出Login shell也沒關係
就放著也不會怎樣，只是覺得比較礙眼而已，不影響ssh tunnel的功能

＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊
