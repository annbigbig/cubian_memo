b.設定網路參數 + 啟用iptables本機防火牆規則

把Cubian的Image檔刷進MicroSD卡之後，第一次開機會進入cubian-config設定介面
在這裡可以設定預設使用者cubie的密碼、locale、timezone、keyboard layout
選有ssh server的監聽埠號、主機名稱…好像還有別的我記不太記來了
總之我一個一個點進去都設定了，接著會重開機，然後就會看到Cubian x1的登入畫面

本來我是想直接用Cubian x1圖形介面的網路設定工具gnome-network-manager
可是我發現我設定好無線網路之後，每一次我重新開機登入Cubian之後，我都要把無線網路先關掉再打開，
才能取得連線，我想我還是直接修改/etc/network/interfaces好了
老方法可是很管用

首先產生無線網路psk
# wpa_passphrase "YOUR_WIFI_ESSID_HERE" "YOUR_WIFI_PASSWORD_HERE" | grep psk=[a-f,0-9]

終端機打印了
psk=03c75e9db9307b63823d672ec889ea66a70316ff9f2bae610f715d4edd10cc3a

然後打開vi文字編輯器，修改你的/etc/network/interfaces
內容如下：

# network is managed by gnome-network-manager
# ---
auto lo
iface lo inet loopback

# --- enable eth0 without ip address ---
auto eth0
iface eth0 inet manual

# --- enable eth0 with dhcp ---
#auto eth0
#allow-hotplug eth0
#  iface eth0 inet dhcp

# --- enable eth0 with static ip ---
#auto eth0
#allow-hotplug eth0
#iface eth0 inet static
#  address 192.168.0.160
#  netmask 255.255.255.0
#  gateway 192.168.0.1
#  dns-nameservers 8.8.8.8 8.8.4.4 168.95.1.1 168.95.192.1

# --- enable wlan0 with dhcp
#auto wlan0
#allow-hotplug wlan0
#iface wlan0 inet dhcp
#  wpa-ssid YOUR_WIFI_SSID_HERE
#  wpa-psk 03c75e9db9307b63823d672ec889ea66a70316ff9f2bae610f715d4edd10cc3a

# --- enable wlan0 with static ip
auto wlan0
allow-hotplug wlan0
iface wlan0 inet static
  address 192.168.0.162
  netmask 255.255.255.0
  gateway 192.168.0.1
  dns-nameservers 8.8.8.8 8.8.4.4 168.95.1.1 168.95.192.1
  wpa-ssid YOUR_WIFI_SSID_HERE
  wpa-psk 03c75e9db9307b63823d672ec889ea66a70316ff9f2bae610f715d4edd10cc3a


改好存檔，離開vi文字編輯器
值得注意的是，這裡的YOUR_WIFI_SSID_HERE請換成你家的無線網路SSID
YOUR_WIFI_PASSWORD_HERE則是換成你家無線網路的密碼
上面一併給出了 有線網卡eth0的配置方式
如果需要用到eth0，就把前面注解的#給拿掉
上面的組態檔還是有啟用eth0，只是沒有給它任何ipv4的地址配置
至於無線網卡wlan0，是直接使用static ip指定一個靜態IP的方式

（附注：請修改/etc/hosts 內容如下）
127.0.0.1 cubie

除了登入用戶名稱是cubie之外，我的主機名稱也叫cubie

＃＃＃＃＃＃＃＃＃＃＃＃＃＃＃＃＃＃＃＃＃＃＃＃＃＃＃＃＃＃＃＃＃＃＃＃＃＃＃＃＃＃＃＃＃＃＃＃＃＃＃＃＃＃＃＃＃＃＃＃＃＃＃＃＃＃＃＃＃＃＃＃＃＃＃＃＃＃＃＃＃
 啟用iptables本機防火牆規則

開機的時候要自動載入ip_tables模組
修改/etc/modules
# vi /etc/modules

在這裡列出我的完整的/etc/modules
如下
# /etc/modules: kernel modules to load at boot time.
#
# This file contains the names of kernel modules that should be loaded
# at boot time, one per line. Lines beginning with "#" are ignored.
# Parameters can be specified after the module name.


# GPIO
gpio_sunxi

# GPU
ump
mali

# Multimedia
sunxi_cedar_mod

# WIFI
#bcmdhd

# firewall
ip_tables

接下來要把防火牆規則寫在/root/firewall.sh
# touch /root/firewall.sh
# chmod +x /root/firewall.sh
# vi /root/firewall.sh

這裡列出我的/root/firewall.sh完整內容如下
#!/bin/bash
# ============ Set your network parameters here ===================================================
iptables=/sbin/iptables
loopback=127.0.0.1
local=192.168.0.160
lan=192.168.0.0/24
# =================================================================================================
$iptables -t filter -F
$iptables -t filter -A INPUT -m state --state ESTABLISHED,RELATED -j ACCEPT
$iptables -t filter -A INPUT -i lo -s $loopback -d $loopback -p all -j ACCEPT
$iptables -t filter -A INPUT -i eth0 -s $local -d $local -p all -j ACCEPT
$iptables -t filter -A INPUT -d $local -p tcp --dport 36000 -j ACCEPT
$iptables -t filter -A INPUT -d $local -p tcp --dport 80 -j ACCEPT
$iptables -t filter -A INPUT -s $lan -d $local -p icmp -j ACCEPT
$iptables -t filter -P INPUT DROP
$iptables -t filter -L -nv --line-number
# =================================================================================================

每一條規則解釋如下
清空filter表的所有規則
如果是本機發出第一個請求封包之後，得到其他異地機的回應，這種封包可以接受
如果是從本機lo介面進入，來源是127.0.0.1，目的地是127.0.0.1，封包類型不限制，這種封包可以接受
如果是從本機eth0介面進入，來源是192.168.0.160，目的地是192.168.0.160，封包類型不限制，這種封包可以接受
如果是要連接到本機192.168.0.160的tcp port 36000（自定義的ssh server服務），這種封包可以接受
如果是要連接到本機192.168.0.160的tcp port 80（nginx HTTP Server服務），這種封包可以接受
如果來源IP是從內網區段192.168.0.0/24，而目的地是本機192.168.0.160的icmp封包，這種封包可以接受
預設的filter表的INPUT鏈規則是DROP
打印一下filter表的防火牆規則，--line-number加上行號，以及-n不要試著去反查規則裡的IP的DNS域名，以及-v列出更為詳細的資訊

# =================================================================================================

接著在/etc/rc.local裡面呼叫/root/firewall.sh
這裡列出我的完整的/etc/rc.local
如下
#!/bin/sh -e
#
# rc.local
#
# This script is executed at the end of each multiuser runlevel.
# Make sure that the script will "exit 0" on success or any other
# value on error.
#
# In order to enable or disable this script just change the execution
# bits.
#
# By default this script does nothing.

/root/firewall.sh

exit 0

重新將CubieTruck開機
# init 6

然後可以使用這個指令查看本機防火牆有沒有啟用了
# iptables -t filter -L -nv --line-number

如果正確啟用了本機防火牆，就會看到這樣的終端機輸出
Chain INPUT (policy DROP 0 packets, 0 bytes)
 pkts bytes target     prot opt in     out     source               destination         
91429 7939K ACCEPT     all  --  *      *       0.0.0.0/0            0.0.0.0/0            state RELATED,ESTABLISHED
    1    60 ACCEPT     all  --  lo     *       127.0.0.1            127.0.0.1           
    0     0 ACCEPT     all  --  eth0   *       192.168.0.160        192.168.0.160       
    1    60 ACCEPT     tcp  --  *      *       0.0.0.0/0            192.168.0.160        tcp dpt:36000
    0     0 ACCEPT     tcp  --  *      *       0.0.0.0/0            192.168.0.160        tcp dpt:80
    0     0 ACCEPT     icmp --  *      *       192.168.0.0/24       192.168.0.160       

Chain FORWARD (policy ACCEPT 0 packets, 0 bytes)
 pkts bytes target     prot opt in     out     source               destination         

Chain OUTPUT (policy ACCEPT 135 packets, 13985 bytes)
 pkts bytes target     prot opt in     out     source               destination         
root@cubie:~#

(只有保護本機，所以只有在filter表的INPUT鏈加上過濾規則，持續加強中…還在看怎麼防止DDOS功撃的部分，稍後弄懂了之後會補上)
